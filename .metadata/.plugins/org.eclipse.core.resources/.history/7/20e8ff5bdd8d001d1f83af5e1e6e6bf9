package br.ce.wcaquino.servicos;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Spy;

public class CalculadoraMockTest {
	
	@Mock
	private Calculadora calcMock;
	
	@Spy
	private Calculadora calcSpy;
	
	@Before
	public void setUp() {
		MockitoAnnotations.initMocks(this);
		
	}
	
	@Test
	public void deveMostraDiferencaEntreMockSpy() {
		/*
		 * O comportamento padrão de um mock é: se for informado a ele o que retornar em uma determinada condição, ele irá retornar aquele valor. Se forem passados valores não previstos ele irá retornar o valor default do tipo retornado.
		 * Por exemplo: null para objetos, 0 para int, 0.0 para double e assim sucessivamente. O exemplo abaixo irá imprimir 0 (zero) porque dissemos que quando o método somar for chamado passando os valores 1 e 2, deve ser retornado o
		 * valor 8. Porém, a chamada feita dentro do método System.out.println passou os valores 1 e 5. Como o mock não previu tais valores, foi retornado o valor default do tipo retornado por somar. Como se trata de um int, o valor
		 * retornado foi 0.
		 */
		when(calcMock.somar(1, 2)).thenReturn(8);
		System.out.println("Mock retornou o valor " + calcMock.somar(1, 5));
		
		/*
		 * No caso do Spy, se for feita uma execução não prevista, ele irá efetivamente fazer a chamada ao método definido no teste e retornará esse valor.
		 * No exemplo abaixo será impresso o valor 6 já que não foi prevista a chamada ao método somar passando os argumentos 1 e 5.
		 * 
		 * Observação: por esse motivo Spy não funciona com interfaces, apenas com classes concretas.
		 */
		when(calcSpy.somar(1, 2)).thenReturn(8);
		System.out.println("Spy retornou o valor " + calcSpy.somar(1, 5));
		
	}

	@Test
	public void teste() {
		Calculadora calc = Mockito.mock(Calculadora.class);
		
		ArgumentCaptor<Integer> argCapt = ArgumentCaptor.forClass(Integer.class);
		when(calc.somar(argCapt.capture(), argCapt.capture())).thenReturn(5);
		
		assertEquals(5, calc.somar(1, 10000));

		// Para exibir todos os valores capturados.
		System.out.println(argCapt.getAllValues());
	}
}
